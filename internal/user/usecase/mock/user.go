// Code generated by MockGen. DO NOT EDIT.
// Source: internal/user/usecase/interface.go

// Package mock is a generated GoMock package.
package mock

import (
	entity "go-clean-arch/internal/user/entity"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockRepository) Create(e *entity.User) (*entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", e)
	ret0, _ := ret[0].(*entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockRepositoryMockRecorder) Create(e interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockRepository)(nil).Create), e)
}

// Destroy mocks base method.
func (m *MockRepository) Destroy(userID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Destroy", userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Destroy indicates an expected call of Destroy.
func (mr *MockRepositoryMockRecorder) Destroy(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Destroy", reflect.TypeOf((*MockRepository)(nil).Destroy), userID)
}

// FindByID mocks base method.
func (m *MockRepository) FindByID(userID int64) (*entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByID", userID)
	ret0, _ := ret[0].(*entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByID indicates an expected call of FindByID.
func (mr *MockRepositoryMockRecorder) FindByID(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByID", reflect.TypeOf((*MockRepository)(nil).FindByID), userID)
}

// Update mocks base method.
func (m *MockRepository) Update(userID int64, u *entity.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", userID, u)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockRepositoryMockRecorder) Update(userID, u interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockRepository)(nil).Update), userID, u)
}

// MockUseCaseUser is a mock of UseCaseUser interface.
type MockUseCaseUser struct {
	ctrl     *gomock.Controller
	recorder *MockUseCaseUserMockRecorder
}

// MockUseCaseUserMockRecorder is the mock recorder for MockUseCaseUser.
type MockUseCaseUserMockRecorder struct {
	mock *MockUseCaseUser
}

// NewMockUseCaseUser creates a new mock instance.
func NewMockUseCaseUser(ctrl *gomock.Controller) *MockUseCaseUser {
	mock := &MockUseCaseUser{ctrl: ctrl}
	mock.recorder = &MockUseCaseUserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUseCaseUser) EXPECT() *MockUseCaseUserMockRecorder {
	return m.recorder
}

// CreateUser mocks base method.
func (m *MockUseCaseUser) CreateUser(email, name, password string) (*entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", email, name, password)
	ret0, _ := ret[0].(*entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockUseCaseUserMockRecorder) CreateUser(email, name, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockUseCaseUser)(nil).CreateUser), email, name, password)
}

// DestroyUser mocks base method.
func (m *MockUseCaseUser) DestroyUser(userID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DestroyUser", userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DestroyUser indicates an expected call of DestroyUser.
func (mr *MockUseCaseUserMockRecorder) DestroyUser(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DestroyUser", reflect.TypeOf((*MockUseCaseUser)(nil).DestroyUser), userID)
}

// FindUserByID mocks base method.
func (m *MockUseCaseUser) FindUserByID(userID int64) (*entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindUserByID", userID)
	ret0, _ := ret[0].(*entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindUserByID indicates an expected call of FindUserByID.
func (mr *MockUseCaseUserMockRecorder) FindUserByID(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindUserByID", reflect.TypeOf((*MockUseCaseUser)(nil).FindUserByID), userID)
}

// UpdateUser mocks base method.
func (m *MockUseCaseUser) UpdateUser(userID int64, email, name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", userID, email, name)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *MockUseCaseUserMockRecorder) UpdateUser(userID, email, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockUseCaseUser)(nil).UpdateUser), userID, email, name)
}
